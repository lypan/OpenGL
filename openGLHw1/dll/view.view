#include "mesh.h"
#include "light.h"
#include "scene.h"
#include "glut.h"
#include "view.h"
#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include <sstream>

std::ifstream testFile;	

std::vector<mesh*> Object;
scene Scene;
light Light;
view View;

std::vector<std::string> sceneFile;
std::vector<std::string> lightFile;
std::vector<std::string> viewFile;
std::vector<std::string> objectFile;

int windowSize[2];

void lightF();
void displayF();
void reshapeF(GLsizei , GLsizei );

int main(int argc, char** argv)
{
	// initialize
	Object.clear();

	sceneFile.clear();
	lightFile.clear();
	viewFile.clear();
	objectFile.clear();
	// scene 1 or scene2
	int testNumber = 0;
	std::cout << "Test Scene1 or Scene2?\nInput the number." << std::endl;
	std::cin >> testNumber;
	
	// change int to string
	std::stringstream ss;
	ss.str("");
	ss.clear();
	ss << testNumber;
	std::string number = "";
	number = ss.str();
	std::string testScene = "Scene" + number + ".txt";

	// open test case
	testFile.open(testScene);
	if (testFile.is_open())
	{
		// store fileName
		std::string line = "";
		while(std::getline(testFile, line))
		{

			if(line.substr(line.find_last_of(".") + 1) == "scene")
			{
				sceneFile.push_back(line);
			}
			else if (line.substr(line.find_last_of(".") + 1) == "view")
			{
				viewFile.push_back(line);
			}
			else if (line.substr(line.find_last_of(".") + 1) == "light")
			{
				lightFile.push_back(line);
			}			
		}
	}
	testFile.close();
	Scene = scene(sceneFile[0], objectFile);
	Light = light(lightFile[0]);
	View = view(viewFile[0]);

	// file read finish
	
	for (size_t i = 0; i < objectFile.size(); i ++)
	{
		Object.push_back(new mesh(objectFile[i].c_str()));
	}

	glutInit(&argc, argv);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(0, 0);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutCreateWindow("Hw1");

	// call back
	glutDisplayFunc(displayF);
	glutReshapeFunc(reshapeF);

	
	glutMainLoop();

	system("pause");
	return 0;
}

void lightF()
{
	// GLfloat matrix[16]; 
	// glGetFloatv (GL_MODELVIEW_MATRIX, matrix);
	// for (int l = 0; l < 16; l ++)	{std::cout << matrix[l];}std::cout << std::endl;

	GLfloat light_specular[4] = {0};
	GLfloat light_diffuse[4] = {0};
	GLfloat light_ambient[4] = {0};
	GLfloat light_position[4] = {0};
	GLfloat light_pure_ambient[4] = {0};

	glShadeModel(GL_SMOOTH);
	// z buffer enable
	glEnable(GL_DEPTH_TEST);
	// enable lighting
	glEnable(GL_LIGHTING);

	int lightNumber = GL_LIGHT0;
	for (int i = 0; i < Light.size; i ++)
	{

		// glPushMatrix();
		glEnable(lightNumber);
		lightNumber ++;
		if(Light.type[i] == "light")
		{
			// set light property
			light_position[0] = Light.x[i];
			light_position[1] = Light.y[i];
			light_position[2] = Light.z[i];
			light_position[3] = 1.0;

			light_diffuse[0] = Light.dr[i];
			light_diffuse[1] = Light.dg[i];
			light_diffuse[2] = Light.db[i];
			light_diffuse[3] = 1.0;

			light_specular[0] = Light.sr[i];
			light_specular[1] = Light.sg[i];
			light_specular[2] = Light.sb[i];
			light_specular[3] = 1.0;

			light_ambient[0] = Light.ar[i];
			light_ambient[1] = Light.ag[i];
			light_ambient[2] = Light.ab[i];
			light_ambient[3] = 1.0;

			// set light
			glLightfv(lightNumber, GL_POSITION, light_position);
			glLightfv(lightNumber, GL_DIFFUSE, light_diffuse);
			glLightfv(lightNumber, GL_SPECULAR, light_specular);
			glLightfv(lightNumber, GL_AMBIENT, light_ambient);
	
			// glPopMatrix();
		}
		else if(Light.type[i] == "ambient")
		{
			light_pure_ambient[0] = Light.aar.back();
			Light.aar.pop_back();
			light_pure_ambient[1] = Light.aag.back();
			Light.aag.pop_back();
			light_pure_ambient[2] = Light.aab.back();
			Light.aab.pop_back();
			light_pure_ambient[3] = 1.0;
			glLightModelfv(GL_LIGHT_MODEL_AMBIENT, light_pure_ambient);

			// glPopMatrix();
		}

	}
}

void displayF()
{
	// clear the buffer
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);      // æ¸…é™¤?¨color
	glClearDepth(1.0f);                        // Depth Buffer (å°±æ˜¯z buffer) Setup
	glEnable(GL_DEPTH_TEST);                   // Enables Depth Testing
	glDepthFunc(GL_LEQUAL);                    // The Type Of Depth Test To Do
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);// ?™è??Šç•«?¢æ??é??²ä¸¦ä¸”æ??¤z buffer


	// viewport transformation
	glViewport(0, 0, 800, 800);
	// glViewport(View.x, View.y, View.w, View.h);

	// projection transformation
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	// gluPerspective(View.fovy, (GLfloat)View.w / (GLfloat)View.h, View.near, View.far);
		gluPerspective(60.0, (GLfloat)windowSize[0]/(GLfloat)windowSize[1], 10.0, 5000.0);

	// viewing and modeling transformation
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	// gluLookAt(	View.ex, View.ey, View.ez,// eye
	// 			View.vax, View.vay, View.vaz,     // center
	// 			View.vux, View.vuy, View.vuz);    // up
	gluLookAt(	200.0, 300.0, 150.0,// eye
				0.0, 0.0, 0.0,     // center
				0.0, 1.0, 0.0);    // up
	//æ³¨æ?lightä½ç½®?„è¨­å®šï?è¦åœ¨gluLookAtä¹‹å?
	lightF();


	int lastMaterial = -1;
	for (size_t k = 0; k < Object.size(); k ++)
	{
		glPushMatrix();

		glTranslatef(Scene.Tx[k], Scene.Ty[k], Scene.Tz[k]);
		glRotatef(Scene.Angle[k], Scene.Rx[k], Scene.Ry[k], Scene.Rz[k]);
		glScalef(Scene.Sx[k], Scene.Sy[k], Scene.Sz[k]);

		
		for(size_t i = 0; i < Object[k]->fTotal; i ++)
		{
			// set material property if this face used different material
			if(lastMaterial != Object[k]->faceList[i].m)
			{
				lastMaterial = (int)Object[k]->faceList[i].m;
				glMaterialfv(GL_FRONT, GL_AMBIENT  , Object[k]->mList[lastMaterial].Ka);
				glMaterialfv(GL_FRONT, GL_DIFFUSE  , Object[k]->mList[lastMaterial].Kd);
				glMaterialfv(GL_FRONT, GL_SPECULAR , Object[k]->mList[lastMaterial].Ks);
				glMaterialfv(GL_FRONT, GL_SHININESS, &Object[k]->mList[lastMaterial].Ns);

				//you can obtain the texture name by Object[0]->mList[lastMaterial].map_Kd
				//load them once in the main function before mainloop
				//bind them in display function here
			}

			glBegin(GL_TRIANGLES);
			for (size_t j = 0; j < 3; j ++)
			{
				//textex corrd. Object[k]->tList[Object[k]->faceList[i][j].t].ptr
				glNormal3fv(Object[k]->nList[Object[k]->faceList[i][j].n].ptr);
				glVertex3fv(Object[k]->vList[Object[k]->faceList[i][j].v].ptr);	
			}
			glEnd();
		}

		glPopMatrix();
		glutSwapBuffers();
	}
	
}

void reshapeF(GLsizei w, GLsizei h)
{
	windowSize[0] = w;
	windowSize[1] = h;
}

